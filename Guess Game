use std::cmp::Ordering;//use Ordering 
use std::io; //use io to prompt the user and to read users input
use rand::Rng; //use Rng trait to generate a random number
               //with upper bound plus one to get the 
               //the actual upper bound i.e (a,b+1) to get
               //(a,b);

fn main() {

    println!("Guess the number!");//print a prompt thats 
                                  //states what the game is
   
    let secret_number = rand::thread_rng().gen_range(1,101);//create a thread to generate the random number
   
    loop {
        println!("Please input your guess.");//request input from the user.

        let mut guess = String::new();// create a mutable variable named guess
                                  //  of type String which is a new instance of
                                 // of type string  
         io::stdin()
              .read_line(&mut guess)//read the user's input
              .expect("Failed to read line");//throw an exception if something went wrong
  
         let guess: u32 = match guess.trim().parse() {
               Ok(num) => num,
               Err(_) => continue,
         };

    println!("You guessed: {}",guess);
    match guess.cmp(&secret_number) {
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => {
                println!("You win!");
                break;
            }//end of Equal comparison
       }//end of comparing numbers
    }//end of loop
}//end of main function
